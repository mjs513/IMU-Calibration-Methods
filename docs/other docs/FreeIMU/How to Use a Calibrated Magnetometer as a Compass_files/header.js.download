"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
(function () {
    var Flymenu = /** @class */ (function () {
        function Flymenu() {
            this.rtl = false;
            var e = this;
            this.rtl = !1;
            var navElementTimer;
            this.options = {
                namespace: "flymenu",
                body: "body",
                rtlClass: "rtl",
                container: ".flymenu",
                backdropTarget: ".nav-bar",
                featuredAds: ".flymenu__featured",
                openClass: "flymenu__open",
                columnClass: "flymenu__column",
                sectionsContainer: ".flymenu .flymenu__sections",
                section: ".flymenu .flymenu__section",
                column: ".flymenu .flymenu__column",
                menuTrigger: ".flymenu__trigger",
                toggleClass: "flymenu-toggle",
                toggleMask: "flymenu-mask",
                navElement: ".flymenu__nav-bar",
                navContainer: ".flymenu__container",
                levelTriggers: "[data-level]",
                backTriggers: ".flymenu__back",
                breakpoint: 1025
            },
                this.imageList = [],
                this.body = document.querySelector(this.options.body),
                this.container = document.querySelector(this.options.container),
                this.backdropTarget = document.querySelector(this.options.backdropTarget),
                this.navElement = document.querySelector(this.options.navElement),
                this.navContainer = document.querySelector(this.options.navContainer),
                this.sectionsContainer = document.querySelector(this.options.sectionsContainer),
                this.allSections = document.querySelectorAll(this.options.section),
                this.featuredAds = document.querySelectorAll(this.options.featuredAds),
                this.columns = document.querySelectorAll(this.options.column),
                this.menuTriggers = document.querySelectorAll(this.options.menuTrigger),
                this.levelTriggers = document.querySelectorAll(this.options.levelTriggers),
                this.backTriggers = document.querySelectorAll(this.options.backTriggers),
                this.navElement.addEventListener("mouseleave", function () {
                    e.identifyMobile() || (navElementTimer = window.setTimeout(function () {
                        e.clearOpenSections(),
                            e.allSections.forEach(function (t) {
                                t.classList.remove(e.options.openClass);
                            });
                    }, 180));
                }),
                this.navElement.addEventListener("mouseenter", function () {
                    clearTimeout(navElementTimer);
                }),
                this.featuredAds.forEach(function (t) {
                    t.addEventListener("mouseenter", function () {
                        clearTimeout(e.updateFeaturedTimer);
                    });
                }),
                this.allSections.forEach(function (t, n) {
                    e.addSectionLogic(t, n);
                }),
                this.menuTriggers.forEach(function (t) {
                    t.addEventListener("click", e.toggleMenu.bind(e));
                }),
                this.levelTriggers.forEach(function (t) {
                    t.addEventListener("touchstart", function (n) {
                        if (!e.identifyMobile()) {
                            n.stopPropagation();
                            var o = t.parentElement.classList.contains(e.options.openClass);
                            '1' == t.dataset.level && e.clearOpenSections(),
                                e.closeSiblings(t.parentElement),
                                e.setMenuLevel(n, !0),
                                o && t.parentElement.classList.remove(e.options.openClass);
                        }
                    }, { passive: true });
                }),
                this.levelTriggers.forEach(function (t) {
                    t.addEventListener("click", e.setMenuLevel.bind(e));
                }),
                this.backTriggers.forEach(function (t) {
                    t.addEventListener("click", function (t) {
                        e.menuBack(t, this);
                    });
                }),
                this.initialize();
        }
        Flymenu.prototype.initialize = function () {
            var _this = this;
            var debounceTimer;
            this.body.classList.add(this.options.namespace + "-" + this.options.body);
            this.body.classList.contains(this.options.rtlClass) && (this.rtl = !0);
            this.setBackdrop();
            window.addEventListener('resize', function (e) {
                clearTimeout(debounceTimer);
                debounceTimer = window.setTimeout(function () {
                    _this.isMobile != _this.identifyMobile() && (_this.toggleMenu(e, !0),
                        _this.toggleBackdropClass(!0));
                }, 50);
            });
        };
        Flymenu.prototype.toggleMenu = function (t, e) {
            var n = this;
            t.preventDefault(),
                t.stopPropagation(),
                e ? (this.clearOpenSections(),
                    this.body.classList.remove(this.options.toggleClass),
                    this.container.classList.remove(this.options.toggleClass),
                    this.scrollNavTop(),
                    setTimeout(function () {
                        n.navElement.setAttribute("data-menu-level", "0");
                    }, 500)) : (this.body.classList.contains(this.options.toggleClass) ? (this.clearOpenSections(),
                    this.scrollNavTop(),
                    this.body.classList.toggle(this.options.toggleClass),
                    this.container.classList.toggle(this.options.toggleClass)) : this.body.classList.contains(this.options.toggleMask) ? (this.clearOpenSections(),
                    this.scrollNavTop(),
                    this.body.classList.remove(this.options.toggleMask)) : (this.body.classList.toggle(this.options.toggleClass),
                    this.container.classList.toggle(this.options.toggleClass)),
                    setTimeout(function () {
                        n.navElement.setAttribute("data-menu-level", "0");
                    }, 500));
        };
        Flymenu.prototype.setBackdrop = function (t) {
            var e = document.querySelector(".menu-backdrop");
            if (e && t)
                e.parentNode.removeChild(e);
            else if (!e) {
                var n = document.createElement("div");
                n.classList.add("menu-backdrop"),
                    n.addEventListener("click", this.toggleMenu.bind(this)),
                    this.container.insertAdjacentElement("beforeend", n);
            }
        };
        Flymenu.prototype.toggleBackdropClass = function (t) {
            this.identifyMobile() || (t ? this.container.classList.remove(this.options.toggleClass) : this.container.classList.add(this.options.toggleClass));
        };
        Flymenu.prototype.setMenuLevel = function (t, e) {
            var n = t.target, o = t.target.parentElement;
            if (!o.querySelectorAll(".flymenu__section-contents").length) {
                return;
            }
            t.preventDefault(),
                t.stopPropagation();
            var i = o.querySelector(".flymenu__column > ul"), s = e || this.identifyMobile(), l = 1 == o.querySelectorAll(".flymenu__column").length;
            if (o.classList.add(this.options.openClass),
                this.scrollNavTop(),
                s && n.hasAttribute("mobile-target"))
                return window.location.href = n.getAttribute("mobile-target");
            if (l && !n.hasAttribute("view-all-created") && i) {
                n.setAttribute("view-all-created", "");
                var a = document.createElement("li");
                a.classList.add("flymenu__item"),
                    a.classList.add("strong"),
                    a.classList.add("hide-desktop"),
                    a.innerHTML = '<a class="title" href="' + n.getAttribute("href") + '">View all ' + n.innerText;
            }
            if (s) {
                n.setAttribute("data-open", "");
                var r = n.getAttribute("data-level");
                this.navElement.setAttribute("data-menu-level", r);
            }
            else {
                var c = n.getAttribute("href");
                if (!c)
                    return;
                window.location.href = c;
            }
            this.findAndLoadImages(n);
        };
        Flymenu.prototype.menuBack = function (t, e) {
            var n = this;
            t.preventDefault(),
                t.stopPropagation();
            e.closest(this.options.openClass);
            setTimeout(function () {
                t.target.parentElement.parentElement.classList.remove(n.options.openClass);
            }, 10);
            var o = parseInt(this.navElement.getAttribute("data-menu-level"), 10) - 1;
            0 == o && this.clearOpenSections(),
                this.navElement.setAttribute("data-menu-level", o.toString());
        };
        Flymenu.prototype.identifyMobile = function () {
            return this.isMobile = window.innerWidth < this.options.breakpoint,
                this.isMobile;
        };
        Flymenu.prototype.isInViewport = function (t, e) {
            var n = t.getBoundingClientRect();
            return e ? n.left >= 0 : n.right <= (window.innerWidth || document.documentElement.clientWidth);
        };
        Flymenu.prototype.addSectionLogic = function (t, e) {
            var n = this, o = this;
            t.setAttribute("tabindex", "0");
            t.setAttribute("data-index", e.toString());
            if (!t.querySelectorAll(".flymenu__section-contents").length) {
                return;
            }
            t.addEventListener("keypress", function (e) {
                n.openSection = t,
                    e.preventDefault(),
                    e.stopPropagation(),
                    t.classList.contains("flymenu__open") ? (o.body.classList.remove(o.options.toggleMask),
                        t.classList.toggle(n.options.openClass)) : (o.body.classList.add(o.options.toggleMask),
                        t.classList.toggle(n.options.openClass),
                        n.findAndLoadImages(e.target));
            });
            o.identifyMobile() && (Array.from(document.getElementsByClassName("flymenu__section-title")).forEach(function (t) {
                t.addEventListener("click", function (t) {
                    t.preventDefault();
                });
            }),
                t.addEventListener("click", function (e) {
                    n.openSection = t,
                        e.stopPropagation(),
                        t.classList.contains("flymenu__open") ? (o.body.classList.remove(o.options.toggleMask),
                            t.classList.toggle(n.options.openClass)) : (o.body.classList.add(o.options.toggleMask),
                            t.classList.toggle(n.options.openClass),
                            n.findAndLoadImages(e.target));
                }));
            t.querySelectorAll(this.options.column).forEach(function (t) {
                t.addEventListener("mouseleave", function (t) {
                    var e = this, n = o.closetEdge(t, this);
                    if (this.parentElement.querySelector("[data-level]")) {
                        var i = this.parentElement.querySelector("[data-level]").dataset.level;
                        var re = t.relatedTarget;
                        if (o.rtl)
                            if ("right" === n && '2' != i && (o.options.columnClass && re.classList.contains(o.options.columnClass) || re.matches("ul"))) {
                                var s = this.getBoundingClientRect().right + this.getBoundingClientRect().width;
                                o.updateFeaturedPosition(t.target, s);
                            }
                            else
                                "left" === n && setTimeout(function () {
                                    e.parentElement.classList.add(o.options.openClass);
                                }, 61);
                        else if ("left" === n && '2' != i && (re.classList.contains(o.options.columnClass) || re.matches("ul"))) {
                            s = this.getBoundingClientRect().left - this.getBoundingClientRect().width;
                            o.updateFeaturedPosition(t.target, s);
                        }
                        else
                            "right" === n && setTimeout(function () {
                                e.parentElement.classList.add(o.options.openClass);
                            }, 61);
                    }
                }),
                    t.addEventListener("mouseenter", function (t) {
                        var e = this;
                        o.closetEdge(t, this);
                        o.rtl,
                            setTimeout(function () {
                                e.parentElement.classList.add(o.options.openClass);
                            }, 11);
                    });
            }),
                t.addEventListener("mouseenter", function (t) {
                    var e = this;
                    !o.openSection && (o.openSection = this),
                        o.openSection != this && (o.openSection.classList.remove(o.options.openClass),
                            o.openSection = this),
                        o.identifyMobile() && this.classList.contains("flymenu__pin") && o.body.classList.add(o.options.toggleMask),
                        clearTimeout(o.sectionTimer),
                        o.sectionTimer = window.setTimeout(function () {
                            e.classList.add(o.options.openClass);
                            for (var n, i, s, l, a = e.querySelectorAll(".flymenu__column"), r = e.querySelector(".flymenu__section-contents"), c = 0; c < a.length; c++) {
                                var u = a[c];
                                o.identifyMobile() || o.isInViewport(u, o.rtl) || (n = r,
                                    i = o.rtl,
                                    s = void 0,
                                    l = void 0,
                                    l = n.getBoundingClientRect(),
                                    i ? (s = l.left - 21,
                                        n.style.right = s + "px") : (s = l.right - (window.innerWidth || document.documentElement.clientWidth) + 21,
                                        n.style.left = "-" + s + "px"));
                            }
                            o.toggleBackdropClass(!1),
                                o.findAndLoadImages(t.target);
                        }, 200);
                }),
                t.addEventListener("mouseleave", function () {
                    var t = this;
                    o.identifyMobile() ? this.classList.contains("flymenu__pin") && (clearTimeout(o.sectionTimer),
                        o.sectionTimer = window.setTimeout(function () {
                            t.classList.remove(o.options.openClass),
                                o.body.classList.remove(o.options.toggleMask),
                                t.querySelector(".flymenu__section-contents").style.cssText = "";
                        }, 180)) : (clearTimeout(o.sectionTimer),
                        o.sectionTimer = window.setTimeout(function () {
                            o.toggleBackdropClass(!0),
                                t.classList.remove(o.options.openClass),
                                t.querySelector(".flymenu__section-contents").style.cssText = "";
                        }, 180));
                }),
                t.querySelectorAll("li").forEach(function (t) {
                    n.addItemLogic(t);
                });
        };
        Flymenu.prototype.addItemLogic = function (t) {
            var itemTimer, n = this, o = t.querySelector('[data-level="2"]');
            !t.classList.contains("strong") && t.setAttribute("tabindex", "0"),
                o && t.addEventListener("mouseover", function (e) {
                    e.target.querySelector("[data-level='2'") && n.updateFeaturedPosition(t);
                }),
                t.addEventListener("keypress", function (e) {
                    e.stopPropagation(),
                        e.preventDefault(),
                        n.closeSiblings(t),
                        e.keyCode,
                        t.classList.toggle(n.options.openClass),
                        o && (n.openItem = t),
                        n.updateFeaturedPosition(t),
                        !t.classList.contains(n.options.openClass) && o && n.clearOpenSections();
                }),
                t.addEventListener("mouseenter", function (i) {
                    clearTimeout(n.updateFeaturedTimer),
                        n.identifyMobile() || (o && (n.openItem = t),
                            clearTimeout(itemTimer),
                            n.updateFeaturedPosition(t),
                            itemTimer = window.setTimeout(function () {
                                t.classList.add(n.options.openClass);
                            }, 160));
                }),
                t.addEventListener("mouseleave", function (o) {
                    n.closetEdge(o, t);
                    n.updateFeaturedTimer = window.setTimeout(function () {
                        var e;
                        e = n.rtl ? t.getBoundingClientRect().right : t.getBoundingClientRect().left,
                            n.updateFeaturedPosition(o.target, e - 1, !0);
                    }, 1),
                        n.identifyMobile() || (clearTimeout(itemTimer),
                            itemTimer = window.setTimeout(function () {
                                t.classList.remove(n.options.openClass);
                            }, 60));
                });
        };
        Flymenu.prototype.updateFeaturedPosition = function (t, e, n) {
            if (n === void 0) { n = false; }
            var o = this;
            clearTimeout(this.updateFeaturedTimer),
                this.updateFeaturedTimer = window.setTimeout(function () {
                    var i;
                    if (o.openItem) {
                        i = o.openItem.querySelector(o.options.featuredAds);
                    }
                    if (i && o.openSection) {
                        var s = e || (o.rtl ? t.getBoundingClientRect().right : t.getBoundingClientRect().left) - 1, l = o.rtl ? o.openSection.getBoundingClientRect().right : o.openSection.getBoundingClientRect().left;
                        if (t.querySelector(o.options.column) && !n) {
                            var a = t.querySelector(o.options.column);
                            s = e || (o.rtl ? a.getBoundingClientRect().right : a.getBoundingClientRect().left);
                        }
                        i.style.setProperty("transform", "translateX(" + (s - l) + "px)"),
                            (o.rtl ? s < 500 : s - l > 500 && window.innerWidth < 1350) ? i.style.setProperty("display", "none") : i.style.setProperty("display", "");
                    }
                }, 300);
        };
        Flymenu.prototype.findAndLoadImages = function (t) {
            if (!this.isMobile) {
                var e = t.parentElement.querySelectorAll("[data-img]"), n = [];
                e.forEach(function (t) {
                    var e = t.getAttribute("data-img");
                    n.push(e),
                        t.style.setProperty("background-image", "url(" + e + ")");
                });
            }
        };
        Flymenu.prototype.clearOpenSections = function () {
            var t = this, e = document.querySelectorAll("li.flymenu__section > .flymenu__section-title");
            document.querySelectorAll("." + this.options.openClass).forEach(function (e) {
                e.classList.remove(t.options.openClass);
            }),
                e.forEach(function (t) {
                    t.removeAttribute("data-open");
                });
        };
        Flymenu.prototype.closetEdge = function (t, e) {
            var n = e.getBoundingClientRect(), o = n.left, i = n.top, s = n.right, l = n.bottom, a = t.pageX, r = t.pageY, c = Math.abs(i - r), u = Math.abs(l - r), d = Math.abs(o - a), p = Math.abs(s - a);
            switch (Math.min(c, u, d, p)) {
                case d:
                    return "left";
                case p:
                    return "right";
                case c:
                    return "top";
                case u:
                    return "bottom";
                default:
                    return "unknown";
            }
        };
        Flymenu.prototype.closeSiblings = function (t) {
            var e = this;
            Array.from(t.parentElement.querySelectorAll("." + this.options.openClass)).filter(function (e) {
                return e != t;
            }).forEach(function (t) {
                t.classList.remove(e.options.openClass);
            });
        };
        Flymenu.prototype.scrollNavTop = function () {
            document.querySelector(".header__bottom").scrollTop = 0,
                this.navContainer.scrollTop = 0;
        };
        return Flymenu;
    }());
    window.addEventListener("DOMContentLoaded", function (e) {
        window.dkFlymenu = new Flymenu();
    });
})();
/// <reference path="globals.d.ts" />
// helpers need to be in the ordering and punchout headers too when the time comes
var __helpers = {
    head: document.getElementsByTagName('head')[0],
    body: document.getElementsByTagName('body')[0],
    headerDiv: document.getElementById('header'),
    footerDiv: document.getElementsByClassName('footer')[0],
    x: window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth,
    y: window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight,
    Y: Math.max(document.getElementsByTagName('body')[0].scrollHeight, document.getElementsByTagName('body')[0].offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight),
    menuNav: document.getElementsByClassName('pushmenu')[0],
    menuOverlay: document.getElementsByClassName('pushmenu__overlay')[0],
    menuOpen: document.getElementsByClassName('pushmenu__open')[0],
    menuClose: document.getElementsByClassName('pushmenu__close'),
    isiDevice: /ipad|iphone|ipod/i.test(navigator.userAgent.toLowerCase()),
    isAndroid: /android/i.test(navigator.userAgent.toLowerCase()),
    htmlEscape: function (str) {
        return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
    },
    html: function (strings) {
        var exprs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            exprs[_i - 1] = arguments[_i];
        }
        var res = [];
        for (var i = 0; i < exprs.length; i++) {
            res.push(strings[i]);
            var args = Array.isArray(exprs[i]) ? exprs[i] : [exprs[i]];
            for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
                var e = args_1[_a];
                res.push((e && e.__html !== undefined) ? e.__html : __helpers.htmlEscape('' + e));
            }
        }
        res.push(strings[exprs.length]);
        return { __html: res.join('') };
    },
    getHeight: function (element) {
        return Math.max(element.scrollHeight, element.offsetHeight, element.clientHeight);
    },
    parentElement: function (node) {
        if ('parentElement' in node) {
            return node.parentElement;
        }
        var parent = node.parentNode;
        while (parent) {
            if ('className' in parent) {
                return parent;
            }
            else {
                parent = parent.parentNode;
            }
        }
        return null;
    },
    getText: function (element) {
        if ('textContent' in element) {
            return element.textContent;
        }
        else {
            return element.innerText;
        }
    },
    setText: function (element, text) {
        if ('textContent' in element) {
            element.textContent = text;
        }
        else {
            element.innerText = text;
        }
    },
    getTarget: function (e) {
        return (e.target || e.srcElement);
    },
    bind: function (f, that) {
        return function () {
            return f.apply(that, arguments);
        };
    },
    onEvent: function (targets, type, f) {
        var i, node;
        for (i = 0; i < targets.length; i++) {
            node = targets[i];
            if (!node) {
                continue;
            }
            if (node.addEventListener) {
                node.addEventListener(type, __helpers.bind(f, node), false);
            }
            else if (node.attachEvent) {
                node.attachEvent('on' + type, __helpers.bind(f, node));
            }
        }
    },
    hasClass: function (element, className) {
        if (typeof element.className !== "string") {
            return false;
        }
        if (element.className === '') {
            return false;
        }
        var parts = element.className.split(' '), i;
        for (i = 0; i < parts.length; i++) {
            if (parts[i] === className) {
                return true;
            }
        }
        return false;
    },
    hasParentWithClass: function (element, className) {
        var ptr = element;
        while (ptr) {
            if (this.hasClass(ptr, className)) {
                return true;
            }
            ptr = this.parentElement(ptr);
        }
    },
    createCookie: function (name, value) {
        document.cookie = name + "=" + value + "; path=/";
    },
    readCookie: function (name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ')
                c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0)
                return c.substring(nameEQ.length, c.length);
        }
        return null;
    },
    checkVisible: function (elm) {
        if (elm === undefined) {
            return true;
        }
        var rect = elm.getBoundingClientRect(), viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);
        return !(rect.bottom < 0 || rect.top - viewHeight >= 0);
    },
    getQueryStringValue: function (key) {
        var kvs = window.location.search.substring(1).split('&');
        var i, parts;
        for (i = 0; i < kvs.length; i++) {
            parts = kvs[i].split('=');
            if (parts[0] === key) {
                return parts[1];
            }
        }
        return undefined;
    },
    setCookieValue: function (val) {
        if (!/^[a-z]{3}$/i.test(val)) {
            val = window.curs[0];
        }
        var now = new Date();
        var expires = new Date(now.getFullYear(), now.getMonth() + 1, now.getDate());
        var domain = /\.digikey\..*/.exec(location.hostname)[0];
        document.cookie = 'cur=' + val + '; expires=' + expires.toUTCString() + '; domain=' + domain + '; path=/';
    },
    getTLD: function () {
        var domain = /\.digikey\..*/.exec(location.hostname)[0];
        var parts = domain.split('.');
        var end = parts.slice(2, parts.length);
        return end.join('.');
    },
    setLangCookieValue: function (val) {
        var now = new Date();
        var expires = new Date(now.getFullYear(), now.getMonth() + 1, now.getDate());
        var domain = /\.digikey\..*/.exec(location.hostname)[0];
        document.cookie = 'dkLangPref=' + val + '; expires=' + expires.toUTCString() + '; domain=' + domain + '; path=/';
    },
    formatProperty: function (prop) {
        return prop['Label'] + ' ' + prop['Value'];
    },
    preventDefault: function (e) {
        if (e.preventDefault) {
            e.preventDefault(true);
        }
        else {
            e.returnValue = false;
        }
    },
    computeStyle: function (node) {
        return window.getComputedStyle ? window.getComputedStyle(node, null) : node.currentStyle;
    },
    getBrowserDims: function () {
        var docEl = document.documentElement;
        if (typeof (window.innerWidth) === 'number') {
            return { width: window.innerWidth, height: window.innerHeight };
        }
        else if (docEl && (docEl.clientWidth || docEl.clientHeight)) {
            return { width: docEl.clientWidth, height: docEl.clientHeight };
        }
        else {
            return { width: document.body.clientWidth, height: document.body.clientHeight };
        }
    },
    localStorageGet: function (key) {
        try {
            return localStorage.getItem(key);
        }
        catch (error) {
            return undefined;
        }
    },
    localStorageSet: function (key, value) {
        try {
            return localStorage.setItem(key, value);
        }
        catch (error) {
            // Nothing
        }
    },
    localStorageRemove: function (key) {
        try {
            return localStorage.removeItem(key);
        }
        catch (error) {
            // Nothing
        }
    },
    selectorForEach: function (root, selector, fn) {
        [].slice.call(root.querySelectorAll(selector)).forEach(fn);
    },
    waitForEl: function (selector, callback) {
        if (typeof __headerData !== "undefined" && document.querySelector(selector)) {
            callback(Array.from(document.querySelectorAll(selector)));
        }
        else {
            setTimeout(function () {
                __helpers.waitForEl(selector, callback);
            }, 100);
        }
    }
};
/// <reference path="helpers.ts" />
var __headerLayout = (function () {
    var regListeners = [];
    var loggedInTitle = document.querySelector('#my_digikey_logged_in');
    var loggedOutTitle = document.querySelector('#my_digikey_logged_out');
    var loggedInLinks = document.querySelector('#my_digikey_links');
    var loggedOutLinks = document.querySelector('#my_digikey_anon_links');
    function setRegistrationStatus(dataStr) {
        var data;
        try {
            data = JSON.parse(dataStr);
        }
        catch (_) {
            // Swallow it
            return;
        }
        headerLayout.registrationStatus = data;
        var listeners = regListeners;
        regListeners = [];
        for (var i = 0; i < listeners.length; i++) {
            try {
                listeners[i](data);
            }
            catch (_) { }
        }
        setLoginState(data['DisplayName']);
    }
    function setHidden(el, state) {
        if (!el) {
            return;
        }
        var parts = el.className.split(' ').filter(function (c) { return c !== 'hidden'; });
        if (state) {
            parts.push('hidden');
        }
        el.className = parts.join(' ');
    }
    var loggedInFormat = '';
    function setLoginState(name) {
        if (!(loggedInTitle && loggedOutTitle && loggedInLinks && loggedOutLinks)) {
            return;
        }
        var loggedInName = loggedInTitle.querySelector('.my-account-line-1');
        loggedInFormat || (loggedInFormat = loggedInName.innerText);
        var from = [loggedOutTitle, loggedOutLinks];
        var to = [loggedInTitle, loggedInLinks];
        if (name !== '') {
            loggedInName.innerText = loggedInFormat.replace('{0}', name);
        }
        else {
            var tmp = to;
            to = from;
            from = tmp;
        }
        for (var i = 0; i < 2; i++) {
            setHidden(from[i], true);
            setHidden(to[i], false);
            to[i].after(from[i]);
        }
    }
    var timeToShipShown = false;
    function updateTimeToShipShown(show) {
        if (show === timeToShipShown) {
            return;
        }
        timeToShipShown = show;
        __helpers.selectorForEach(document, '.timetoship', function (e) { return setHidden(e, !show); });
    }
    var lastTimeToShip = '';
    function updateTimeToShip() {
        var title = document.querySelector('.timetoship-title');
        var timer = document.querySelector('.timetoship-timer');
        if (!(title && timer)) {
            return;
        }
        var now = new Date();
        if (now.getDay() === 6 || now.getDay() === 0) {
            updateTimeToShipShown(false);
            return;
        }
        updateTimeToShipShown(true);
        //8pm central time in UTC format
        var utcOffset = __headerData.config.isDst ? 1 : 2;
        var utc = Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), utcOffset, 0, 0);
        var date8pm = new Date(utc);
        //find the hours left
        var hh = date8pm.getUTCHours() - now.getUTCHours() - 1;
        if (date8pm.getUTCHours() <= now.getUTCHours()) {
            hh = 24 - Math.abs(date8pm.getUTCHours() - now.getUTCHours() - 1);
        }
        //find mins left
        var mm = (60 - now.getMinutes()) % 60;
        if (mm == 0) {
            hh++;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        var format = hh < 20 ? __headerData.text.timeToShipFormat.replace('{0}', '&nbsp;' + hh).replace('{1}', mm) : '';
        if (format !== lastTimeToShip) {
            lastTimeToShip = format;
            if (format) {
                title.innerHTML = __headerData.text.timeToShipText;
                timer.innerHTML = format;
            }
            else {
                title.innerHTML = '';
                timer.innerHTML = '';
            }
        }
    }
    if (__headerData.text.timeToShipText) {
        setInterval(updateTimeToShip, 1000);
    }
    function setCart(data) {
        var cart = document.querySelector('.flymenu__cart');
        if (!cart) {
            return;
        }
        function setText(parent, selector, text) {
            var el = parent.querySelector(selector);
            if (el) {
                el.innerText = '' + text;
            }
        }
        // Set title
        setText(cart, '.cart-dropdown-title', window.__headerData.text.cartTitle.replace('{0}', data.Count));
        setText(cart, '.toggle--cart-total', data.Count);
        // Clear body
        __helpers.selectorForEach(cart, '.cart__detail, .header-dropdown-sep, .subtotal', function (e) { return e.remove(); });
        // Build new body
        var details = [];
        for (var _i = 0, _a = data.Details; _i < _a.length; _i++) {
            var detail = _a[_i];
            var seller = [];
            if (detail.SellerName) {
                seller.push(__helpers.html(__makeTemplateObject(["\n                    <span class=\"detail__text--large detail__shipped-by\">", "</span>\n                    <span class=\"detail__text--small\">", "</span>\n                "], ["\n                    <span class=\"detail__text--large detail__shipped-by\">", "</span>\n                    <span class=\"detail__text--small\">", "</span>\n                "]), detail.SellerName, __headerData.text.shippedBy));
            }
            details.push(__helpers.html(__makeTemplateObject(["\n                <div class=\"cart__detail\">\n                    <a href=\"", "\" cookie-event=\"ref_page_event=View%20Recent%20Part\">\n                        <img src=\"", "\" class=\"detail__image\">\n                        <span class=\"detail__text\">\n                            <span>", "</span>\n                            <span class=\"detail__text--small\">", "</span>\n                            <span class=\"detail__text--float\">", "</span>\n                            <span class=\"detail__text--large\">", "</span>\n                            <span class=\"detail__text--small\">", "</span>\n                            ", "\n                        </span>\n                    </a>\n                </div>\n            "], ["\n                <div class=\"cart__detail\">\n                    <a href=\"", "\" cookie-event=\"ref_page_event=View%20Recent%20Part\">\n                        <img src=\"", "\" class=\"detail__image\">\n                        <span class=\"detail__text\">\n                            <span>", "</span>\n                            <span class=\"detail__text--small\">", "</span>\n                            <span class=\"detail__text--float\">", "</span>\n                            <span class=\"detail__text--large\">", "</span>\n                            <span class=\"detail__text--small\">", "</span>\n                            ", "\n                        </span>\n                    </a>\n                </div>\n            "]), detail.URL, detail.Image, detail.PartNumber.Value, detail.PartNumber.Label, detail.Price.Value, detail.Quantity.Value, detail.Quantity.Label, seller));
        }
        var cartHtml = __helpers.html(__makeTemplateObject(["\n            ", "\n            <hr class=\"header-dropdown-sep\" />\n            <div class=\"header-cart-ref subtotal\">\n                <span class=\"subtotal-value\">", "</span>\n                <span class=\"subtotal-title\">", "</span>\n                <span class=\"cart--disclaimer\">", "</span>\n            </div>\n        "], ["\n            ", "\n            <hr class=\"header-dropdown-sep\" />\n            <div class=\"header-cart-ref subtotal\">\n                <span class=\"subtotal-value\">", "</span>\n                <span class=\"subtotal-title\">", "</span>\n                <span class=\"cart--disclaimer\">", "</span>\n            </div>\n        "]), details, data.Subtotal, __headerData.text.cartSubtotal, { __html: data.Disclaimer }).__html;
        cart.querySelector('.dropdown--cart').insertAdjacentHTML('afterbegin', cartHtml);
        // Hide checkout if needed
        setHidden(cart.querySelector('.cartcheckout'), !data.Details.length);
        //free shipping threshold
        if (__headerData.text.freeShippingThresholdText && data.FreeShipDifference) {
            cart.querySelector('.freeshipping-title').innerHTML = __headerData.text.freeShippingThresholdText.replace('{0}', data.FreeShipDifference);
            setHidden(cart.querySelector('.freeshipping'), false);
        }
        else {
            setHidden(cart.querySelector('.freeshipping'), true);
        }
    }
    function setPersonalization(json) {
        var data;
        try {
            data = JSON.parse(json);
        }
        catch (_) {
            // Swallow it
            return;
        }
        setCart(data);
    }
    var headerLayout = {
        effectiveCur: __headerData.cur,
        hideDropdown: function () {
            if (document.querySelector('.activeDropdown') !== null) {
                var headerDropdowns = document.querySelectorAll(".header__dropdown");
                for (var i = 0; i < headerDropdowns.length; i++) {
                    headerDropdowns[i].removeAttribute("style");
                }
                document.getElementsByClassName("activeDropdown")[0].className = document.getElementsByClassName("activeDropdown")[0].className.replace(" activeDropdown", "");
            }
        },
        lastScrollTop: 0,
        navbarHeight: document.getElementById("header").offsetHeight,
        hasScrolled: function () {
            var _y = window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight;
            var _Y = Math.max(document.getElementsByTagName('body')[0].scrollHeight, document.getElementsByTagName('body')[0].offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);
            var newScrollTop = document.documentElement.scrollTop || __helpers.body.scrollTop;
            if (Math.abs(headerLayout.lastScrollTop - newScrollTop) <= 5) {
                return;
            }
            if (!__helpers.hasClass(__helpers.headerDiv, "nav-down") && !__helpers.hasClass(__helpers.headerDiv, "nav-up")) {
                __helpers.headerDiv.className += " nav-down";
            }
            if (newScrollTop > headerLayout.lastScrollTop && newScrollTop > headerLayout.navbarHeight) {
                __helpers.headerDiv.className = __helpers.headerDiv.className.replace('nav-down', 'nav-up');
            }
            else {
                if (newScrollTop + _y < _Y) {
                    __helpers.headerDiv.className = __helpers.headerDiv.className.replace('nav-up', 'nav-down');
                }
            }
            headerLayout.lastScrollTop = newScrollTop;
        },
        registrationStatus: undefined,
        addRegistrationStatusListener: function (f) {
            var status = headerLayout.registrationStatus;
            if (status) {
                f(status);
            }
            else {
                regListeners.push(f);
            }
            return function () {
                var idx = regListeners.indexOf(f);
                if (idx !== -1) {
                    regListeners.splice(idx, 1);
                }
            };
        },
        setSearchText: function (text) {
            document.querySelector('header .header__searchinput').value = text;
        },
        getPersonalization: function () {
            if (!document.querySelector('.resource--cart')) {
                return;
            }
            var settings = __headerData.__settings;
            var request = new XMLHttpRequest();
            var _a = settings.getHeaderInfoUrl(__headerData.orderSite, __headerData.orderLang, headerLayout.effectiveCur), url = _a.url, hasUser = _a.hasUser;
            request.open('GET', url, true);
            request.onreadystatechange = function () {
                if (this.readyState === 4) {
                    if (this.status >= 200 && this.status < 400) {
                        setPersonalization(this.responseText);
                        if (hasUser) {
                            setRegistrationStatus(this.responseText);
                        }
                    }
                    else {
                        if (window.mobileCartQuantity) {
                            window.mobileCartQuantity.style.display = 'none';
                        }
                    }
                }
            };
            request.send();
            request = null;
            if (!hasUser) {
                headerLayout.getRegistrationStatus();
            }
        },
        getRegistrationStatus: function () {
            if (!document.querySelector('.resource--cart') || window.location.hostname.indexOf('punchout') !== -1) {
                return;
            }
            var request = new XMLHttpRequest();
            var url = '/MyDigiKey/Home/GetCurrentUser';
            if (window.location.host.match(/^local/)) {
                url = url.replace('classic', 'localordering');
            }
            request.open('GET', url, true);
            request.onreadystatechange = function () {
                if (this.readyState === 4) {
                    if (this.status >= 200 && this.status < 400) {
                        setRegistrationStatus(this.responseText);
                    }
                    else {
                        if (window.mobileCartQuantity) {
                            window.mobileCartQuantity.style.display = 'none';
                        }
                    }
                }
            };
            request.send();
            request = null;
        },
        setMyLists: function () {
            var btn = document.querySelector('#myListsBtn');
            __helpers.onEvent([btn], 'click', function (e) {
                __helpers.preventDefault(e);
                var input = document.querySelector('#myListFileInput');
                __helpers.onEvent([input], 'change', function (e) {
                    var _a;
                    var htmlInput = e.target;
                    if (((_a = htmlInput.files) === null || _a === void 0 ? void 0 : _a.length) != null) {
                        headerLayout.sendMyList(htmlInput.files);
                    }
                });
                if (input) {
                    input.click();
                }
            });
            __helpers.onEvent([btn], 'dragenter', function (e) {
                preventDefaults(e);
            });
            __helpers.onEvent([btn], 'dragover', function (e) {
                preventDefaults(e);
            });
            __helpers.onEvent([btn], 'dragleave', function (e) {
                preventDefaults(e);
            });
            __helpers.onEvent([btn], 'drop', function (e) {
                var _a;
                preventDefaults(e);
                var dataTransfer = e.dataTransfer;
                if (dataTransfer && ((_a = dataTransfer.files) === null || _a === void 0 ? void 0 : _a.length) != null) {
                    if (dataTransfer.files.length > 1) {
                        alert(__headerData.text.alertMultipleFiles);
                    }
                    else {
                        headerLayout.sendMyList(dataTransfer.files);
                    }
                }
            });
        },
        sendMyList: function (files) {
            var allowedExtensions = /(\.xlsx|\.xls|\.csv|\.txt)$/i;
            if (files.length > 1) {
                alert(__headerData.text.alertMultipleFiles);
            }
            else {
                var file = files[0];
                if (file) {
                    if (!allowedExtensions.exec(file.name.toLowerCase())) {
                        alert(__headerData.text.alertFileExtension);
                        return false;
                    }
                    var url = "/".concat(__headerData.lang, "/mylists/api/fileUpload/external?tld=").concat(__helpers.getTLD());
                    var data = new FormData();
                    data.append('file', file);
                    fetch(url, {
                        method: 'POST',
                        body: data
                    }).then(function (rsp) { return rsp.json(); })
                        .then(function (json) { return window.location.href = json; })
                        .catch(function (e) { return console.error('Error', e); });
                }
            }
        }
    };
    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    function updateTextDirection(e) {
        var target = __helpers.getTarget(e);
        if (__helpers.hasParentWithClass(target, 'rtl')) {
            target.style.direction = 'rtl';
            return;
        }
        if (__helpers.computeStyle(__helpers.parentElement(target)).direction === 'ltr') {
            target.style.direction = 'ltr';
            return;
        }
        setTimeout(function () {
            var value = target.value;
            var rtl = false;
            var i, char;
            for (i = 0; i < value.length; i++) {
                char = value.charCodeAt(i);
                if (char >= 1488 && char <= 1514) {
                    rtl = true;
                }
            }
            target.style.direction = rtl ? 'rtl' : 'ltr';
        }, 0);
    }
    function registerDirChanger() {
        var targets = document.querySelectorAll('.dkdirchanger');
        __helpers.onEvent(targets, 'change', updateTextDirection);
        __helpers.onEvent(targets, 'paste', updateTextDirection);
        __helpers.onEvent(targets, 'keydown', updateTextDirection);
        __helpers.onEvent(targets, 'keyup', updateTextDirection);
        var i;
        for (i = 0; i < targets.length; i++) {
            updateTextDirection({ target: targets[i] });
        }
    }
    registerDirChanger();
    var inbar = document.getElementById('banner__graybar--inNav');
    var graybar = document.getElementById('banner__graybar');
    var slideIndex = 0;
    function runMarquee() {
        var inNavSlides = inbar.querySelectorAll('.graybar--marquee');
        var grayBarSlides = graybar.querySelectorAll('.graybar--marquee');
        function displayOff(o) {
            if (grayBarSlides[o]) {
                grayBarSlides[o].classList.remove('onDisplay');
            }
            if (inNavSlides[o]) {
                inNavSlides[o].classList.remove('onDisplay');
            }
        }
        function opaqueOff(o) {
            if (grayBarSlides[o]) {
                grayBarSlides[o].classList.remove('opaque');
            }
            if (inNavSlides[o]) {
                inNavSlides[o].classList.remove('opaque');
            }
        }
        function displayOn(si) {
            if (grayBarSlides[si - 1]) {
                grayBarSlides[si - 1].classList.add('onDisplay');
            }
            if (inNavSlides[si - 1]) {
                inNavSlides[si - 1].classList.add('onDisplay');
            }
        }
        function opaqueOn(si) {
            if (grayBarSlides[si - 1]) {
                grayBarSlides[si - 1].classList.add('opaque');
            }
            if (inNavSlides[si - 1]) {
                inNavSlides[si - 1].classList.add('opaque');
            }
        }
        for (var o = 0; o < grayBarSlides.length; o++) {
            setTimeout(opaqueOff, 9500, o);
            setTimeout(displayOff, 10000, o);
        }
        slideIndex++;
        if (slideIndex > grayBarSlides.length) {
            slideIndex = 1;
        }
        setTimeout(displayOn, 0, slideIndex);
        setTimeout(opaqueOn, 500, slideIndex);
        setTimeout(runMarquee, 10000);
    }
    if (graybar && inbar) {
        var marquees = document.querySelectorAll('.graybar--marquee');
        if (marquees.length > 2) {
            runMarquee();
        }
        else {
            for (var i = 0; i < marquees.length; i++) {
                marquees[i].classList.remove('graybar--marquee');
            }
        }
    }
    var currentHref = '';
    function updateMDLinks() {
        if (currentHref === window.location.href) {
            return;
        }
        currentHref = window.location.href;
        __helpers.selectorForEach(document, 'header a', function (link) {
            var pattern = link.getAttribute('data-original-link') || link.href;
            if (pattern.indexOf('{returnurl}') !== -1) {
                link.setAttribute('data-original-link', pattern);
                link.href = pattern.replace("{returnurl}", encodeURIComponent(currentHref));
            }
        });
    }
    updateMDLinks();
    setInterval(updateMDLinks, 100);
    window.addEventListener('scroll', headerLayout.hasScrolled);
    // For RMB's use
    window.refreshHeaderPersonalization = headerLayout.getPersonalization.bind(headerLayout);
    (function refreshMagicNumber() {
        var cName = "dkc" + "_" + "tra" + "cker";
        var cValue = new Date().getTime() + 1931811616518 + 600000;
        document.cookie = cName + "=" + cValue + ";" + ";path=/;secure";
        setTimeout(refreshMagicNumber, 180000);
    })();
    return headerLayout;
})();
/// <reference path="helpers.ts" />
/// <reference path="headerLayout.ts" />
// Other Teams rely on this
var __langCurr = {
    headerData: __headerData,
    curToggleEnabled: __headerData.config.enableCurToggle && (!window.headerLanguageToggle || !window.headerLanguageToggle.disableCur),
    langToggleEnabled: __headerData.config.enableLangToggle && (!window.headerLanguageToggle || !window.headerLanguageToggle.disableLang),
    doLangPref: function () {
        var lang = __helpers.readCookie('dkLangPref') || '';
        var domain = /\.digikey\..*/.exec(location.hostname)[0];
        if (!/\.com$/.test(domain)) {
            var now = new Date();
            var expires = new Date(now.getFullYear(), now.getMonth() + 1, now.getDate());
            document.cookie = 'ping-accept-language=' + __headerData.lang + '-' + __headerData.site + '; expires=' + expires.toUTCString() + '; domain=' + domain + '; path=/';
        }
        if (__langCurr.langToggleEnabled && lang && lang !== __headerData.lang && __langCurr.headerData.cur !== 'CNY') {
            __langCurr.invokeChange(lang, __headerData.cur);
        }
    },
    invokeChange: function (lang, cur) {
        var basePath = window.location.pathname;
        var baseSearch = window.location.search;
        var config = window.headerLanguageToggle;
        var site = __langCurr.headerData.site;
        var settings = __headerData.__settings;
        function defaultOnChange() {
            // Try the qsp
            var currentParam = 'lang=' + __langCurr.headerData.lang;
            if (baseSearch.indexOf(currentParam) !== -1) {
                window.location.href = settings.tweakRMB(site, cur, basePath + baseSearch.replace(currentParam, 'lang=' + lang));
                return;
            }
            // Try finding site/lang
            var parts = basePath.split('/');
            for (var i = 1; i < (parts.length - 1); i++) {
                if (parts[i].toLowerCase() === __langCurr.headerData.site.toLowerCase() && parts[i + 1].toLowerCase() === __langCurr.headerData.lang.toLowerCase()) {
                    parts[i + 1] = lang;
                    window.location.href = settings.tweakRMB(site, cur, parts.join('/') + baseSearch);
                    return;
                }
            }
            // Try finding lang
            for (var i = 1; i < parts.length; i++) {
                if (parts[i].toLowerCase() === __langCurr.headerData.lang.toLowerCase()) {
                    parts[i] = lang;
                    window.location.href = settings.tweakRMB(site, cur, parts.join('/') + baseSearch);
                    return;
                }
            }
            // Handle the homepage
            if (parts.length === 2 && parts[1] === '') {
                parts[1] = lang;
                window.location.href = settings.tweakRMB(site, cur, parts.join('/') + baseSearch);
                return;
            }
            // Give up and reset
            if (lang !== __langCurr.headerData.lang) {
                var langSelect = document.querySelector('.lang-select');
                if (langSelect) {
                    langSelect.value = __langCurr.headerData.lang;
                }
                return;
            }
            // Reload since the currency has changed
            if (cur !== __headerLayout.effectiveCur) {
                window.location.reload();
            }
        }
        function invokeOnChange() {
            __helpers.setLangCookieValue(lang);
            __helpers.setCookieValue(cur);
            // Hack to handle China; would be nice to get rid of someday
            if (settings.chinaHack(cur)) {
                return;
            }
            if (config && config.change) {
                config.change(lang, cur);
            }
            else {
                defaultOnChange();
            }
        }
        // Delay execution to prevent weirdness when setting window.location
        window.setTimeout(invokeOnChange, 0);
    }
};
//brought in as is for now, look into replacing with something simpler later
// http://spin.js.org/#v2.1.3
var Spinner = (function () {
    "use strict";
    function a(a, b) { var c, d = document.createElement(a || "div"); for (c in b)
        d[c] = b[c]; return d; }
    function b(a) { for (var b = 1, c = arguments.length; c > b; b++)
        a.appendChild(arguments[b]); return a; }
    function c(a, b, c, d) { var e = ["opacity", b, ~~(100 * a), c, d].join("-"), f = .01 + c / d * 100, g = Math.max(1 - (1 - a) / b * (100 - f), a), h = j.substring(0, j.indexOf("Animation")).toLowerCase(), i = h && "-" + h + "-" || ""; return m[e] || (k.insertRule("@" + i + "keyframes " + e + "{0%{opacity:" + g + "}" + f + "%{opacity:" + a + "}" + (f + .01) + "%{opacity:1}" + (f + b) % 100 + "%{opacity:" + a + "}100%{opacity:" + g + "}}", k.cssRules.length), m[e] = 1), e; }
    function d(a, b) { var c, d, e = a.style; if (b = b.charAt(0).toUpperCase() + b.slice(1), void 0 !== e[b])
        return b; for (d = 0; d < l.length; d++)
        if (c = l[d] + b, void 0 !== e[c])
            return c; }
    function e(a, b) { for (var c in b)
        a.style[d(a, c) || c] = b[c]; return a; }
    function f(a) { for (var b = 1; b < arguments.length; b++) {
        var c = arguments[b];
        for (var d in c)
            void 0 === a[d] && (a[d] = c[d]);
    } return a; }
    function g(a, b) { return "string" == typeof a ? a : a[b % a.length]; }
    function h(a) { this.opts = f(a || {}, h.defaults, n); }
    function i() { function c(b, c) { return a("<" + b + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', c); } k.addRule(".spin-vml", "behavior:url(#default#VML)"), h.prototype.lines = function (a, d) { function f() { return e(c("group", { coordsize: k + " " + k, coordorigin: -j + " " + -j }), { width: k, height: k }); } function h(a, h, i) { b(m, b(e(f(), { rotation: 360 / d.lines * a + "deg", left: ~~h }), b(e(c("roundrect", { arcsize: d.corners }), { width: j, height: d.scale * d.width, left: d.scale * d.radius, top: -d.scale * d.width >> 1, filter: i }), c("fill", { color: g(d.color, a), opacity: d.opacity }), c("stroke", { opacity: 0 })))); } var i, j = d.scale * (d.length + d.width), k = 2 * d.scale * j, l = -(d.width + d.length) * d.scale * 2 + "px", m = e(f(), { position: "absolute", top: l, left: l }); if (d.shadow)
        for (i = 1; i <= d.lines; i++)
            h(i, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)"); for (i = 1; i <= d.lines; i++)
        h(i); return b(a, m); }, h.prototype.opacity = function (a, b, c, d) { var e = a.firstChild; d = d.shadow && d.lines || 0, e && b + d < e.childNodes.length && (e = e.childNodes[b + d], e = e && e.firstChild, e = e && e.firstChild, e && (e.opacity = c)); }; }
    var j, k, l = ["webkit", "Moz", "ms", "O"], m = {}, n = { lines: 12, length: 7, width: 5, radius: 10, scale: 1, corners: 1, color: "#000", opacity: .25, rotate: 0, direction: 1, speed: 1, trail: 100, fps: 20, zIndex: 2e9, className: "spinner", top: "50%", left: "50%", shadow: !1, hwaccel: !1, position: "absolute" };
    if (h.defaults = {}, f(h.prototype, { spin: function (b) { this.stop(); var c = this, d = c.opts, f = c.el = a(null, { className: d.className }); if (e(f, { position: d.position, width: 0, zIndex: d.zIndex, left: d.left, top: d.top }), b && b.insertBefore(f, b.firstChild || null), f.setAttribute("role", "progressbar"), c.lines(f, c.opts), !j) {
            var g, h = 0, i = (d.lines - 1) * (1 - d.direction) / 2, k = d.fps, l = k / d.speed, m = (1 - d.opacity) / (l * d.trail / 100), n = l / d.lines;
            !function o() { h++; for (var a = 0; a < d.lines; a++)
                g = Math.max(1 - (h + (d.lines - a) * n) % l * m, d.opacity), c.opacity(f, a * d.direction + i, g, d); c.timeout = c.el && setTimeout(o, ~~(1e3 / k)); }();
        } return c; }, stop: function () { var a = this.el; return a && (clearTimeout(this.timeout), a.parentNode && a.parentNode.removeChild(a), this.el = void 0), this; }, lines: function (d, f) { function h(b, c) { return e(a(), { position: "absolute", width: f.scale * (f.length + f.width) + "px", height: f.scale * f.width + "px", background: b, boxShadow: c, transformOrigin: "left", transform: "rotate(" + ~~(360 / f.lines * k + f.rotate) + "deg) translate(" + f.scale * f.radius + "px,0)", borderRadius: (f.corners * f.scale * f.width >> 1) + "px" }); } for (var i, k = 0, l = (f.lines - 1) * (1 - f.direction) / 2; k < f.lines; k++)
            i = e(a(), { position: "absolute", top: 1 + ~(f.scale * f.width / 2) + "px", transform: f.hwaccel ? "translate3d(0,0,0)" : "", opacity: f.opacity, animation: j && c(f.opacity, f.trail, l + k * f.direction, f.lines) + " " + 1 / f.speed + "s linear infinite" }), f.shadow && b(i, e(h("#000", "0 0 4px #000"), { top: "2px" })), b(d, b(i, h(g(f.color, k), "0 0 1px rgba(0,0,0,.1)"))); return d; }, opacity: function (a, b, c) { b < a.childNodes.length && (a.childNodes[b].style.opacity = c); } }), "undefined" != typeof document) {
        k = function () { var c = a("style", { type: "text/css" }); return b(document.getElementsByTagName("head")[0], c), c.sheet || c.styleSheet; }();
        var o = e(a("group"), { behavior: "url(#default#VML)" });
        !d(o, "transform") && o.adj ? i() : j = d(o, "animation");
    }
    return h;
})();
/// <reference path="helpers.ts" />
/// <reference path="spinner.js" />
var createDialog = (function () {
    var dialogState = { active: false, overlay: undefined, queueSpinner: false, spinner: undefined };
    function createDialog(url, classes, onCancel, onLoad) {
        if (dialogState.active) {
            throw 'A dialog is already active';
        }
        dialogState.active = true;
        var overlay = dialogState.overlay;
        var spinner = dialogState.spinner;
        if (!overlay) {
            overlay = document.createElement('div');
            overlay.className = 'header-overlay';
            document.body.appendChild(overlay);
            spinner = new Spinner({ color: '#fff', position: 'fixed' }).spin();
            document.body.appendChild(spinner.el);
            dialogState.overlay = overlay;
            dialogState.spinner = spinner;
            if (window.mobile && window.mobile.showOverlay) {
                window.mobile.showOverlay();
            }
        }
        function showSpinnerLater() {
            setTimeout(function () {
                if (dialogState.overlay && dialogState.queueSpinner) {
                    spinner.el.style.display = '';
                }
            }, 500);
        }
        function clearOverlay() {
            dialogState.active = false;
            if (overlay) {
                document.body.removeChild(overlay);
            }
            dialogState.overlay = undefined;
            if (window.mobile && window.mobile.hideOverlay) {
                window.mobile.hideOverlay();
            }
        }
        spinner.el.style.display = 'none';
        dialogState.queueSpinner = true;
        showSpinnerLater();
        var container = document.createElement('div');
        container.innerHTML = '<div class="header-popup" tabindex="-1" role="dialog" aria-labelledby="header-popup-title-title"><div class="header-popup-titlebar" unselectable="on"><span class="header-popup-title" id="header-popup-title-title" unselectable="on"></span><a href="#" class="header-popup-close" role="button" unselectable="on"><span class="header-popup-icon" unselectable="on">close</span></a></div><iframe class="' + classes + '" src="' + __helpers.htmlEscape(url) + '"></iframe></div>';
        var dialog = container.querySelector('.header-popup');
        var title = container.querySelector('.header-popup-title');
        var frame = container.querySelector('iframe');
        var closeButton = dialog.querySelector('.header-popup-icon');
        var headerOverlay = document.querySelector('.header-overlay');
        var armed = true;
        dialog.style.zIndex = '1002';
        dialog.style.display = 'none';
        document.body.appendChild(dialog);
        __helpers.onEvent([frame], 'load', function () {
            if (!armed) {
                return;
            }
            var doc;
            try {
                doc = frame.contentDocument;
            }
            catch (e) {
                onCancel();
                return;
            }
            if (!doc) {
                onCancel();
                return;
            }
            var redirectText = doc.querySelector('#redirect');
            var titleText = doc.querySelector('#title');
            var titleElText = doc.querySelector('title');
            var heightText = doc.querySelector('#height');
            var dims = __helpers.getBrowserDims();
            function showDialog() {
                dialogState.queueSpinner = false;
                spinner.el.style.display = 'none';
                if (title.innerHTML !== 'Untitled') {
                    dialog.style.display = '';
                    if (heightText && __helpers.getText(heightText)) {
                        frame.style.maxHeight = __helpers.getText(heightText) + 'px';
                        __helpers.parentElement(heightText).removeChild(heightText);
                    }
                    else {
                        frame.style.maxHeight = __helpers.getHeight(frame.contentDocument.body) + 'px';
                    }
                    dialog.style.top = ((dims.height - __helpers.getHeight(dialog)) / 2) + 'px';
                }
            }
            if (redirectText) {
                frame.src = redirectText.innerHTML;
            }
            else {
                if (titleText) {
                    title.innerHTML = titleText.innerHTML;
                    __helpers.parentElement(titleText).removeChild(titleText);
                }
                else {
                    title.innerHTML = titleElText ? titleElText.innerHTML : 'Untitled';
                }
                // Hook the forms
                __helpers.onEvent(doc.forms, 'submit', function () {
                    spinner.el.style.display = 'none';
                    dialogState.queueSpinner = true;
                    showSpinnerLater();
                    dialog.style.display = 'none';
                    clearOverlay();
                    var curPrompt = document.getElementById('currency-prompt');
                    if (curPrompt && curPrompt.style.display === "flex") {
                        curPrompt.style.display = 'none';
                        dk.siteMask.hide();
                    }
                });
                if (onLoad) {
                    onLoad(frame, showDialog);
                }
                else {
                    showDialog();
                }
            }
        });
        __helpers.onEvent([closeButton, headerOverlay], 'click', function (e) {
            onCancel();
            __helpers.preventDefault(e);
        });
        //escape key close in the future
        return {
            close: function () {
                dialogState.active = false;
                armed = false;
                document.body.removeChild(dialog);
                setTimeout(function () {
                    if (!dialogState.active) {
                        if (overlay) {
                            document.body.removeChild(overlay);
                        }
                        dialogState.overlay = undefined;
                        document.body.removeChild(spinner.el);
                        spinner.stop();
                        if (window.mobile && window.mobile.hideOverlay) {
                            window.mobile.hideOverlay();
                        }
                    }
                }, 0);
            },
            frame: frame
        };
    }
    return createDialog;
})();
/// <reference path="helpers.ts" />
(function () {
    var url = __headerData.config.bannerUrl;
    if (!url) {
        return;
    }
    var key = __headerData.cur + ';' + url;
    var bannerInfo = (function () {
        var text = __helpers.localStorageGet('banner_message');
        if (text) {
            try {
                return JSON.parse(text);
            }
            catch (error) {
                // Fall through
            }
        }
        return undefined;
    })();
    var age = bannerInfo ? (+new Date() - bannerInfo.date) / 86400000 : 0;
    if (bannerInfo && bannerInfo.hide) {
        if (age >= __headerData.config.bannerCloseDuration) {
            bannerInfo = undefined;
            __helpers.localStorageRemove('banner_message');
        }
    }
    window.createShippingCookieLS = function () {
        __helpers.localStorageSet('banner_message', JSON.stringify({
            date: +new Date(),
            hide: true
        }));
        __helpers.selectorForEach(document, '.shipping-notice-banner, .header-shipping-msg, .header-shipping-msg-close', function (e) { return e.style.display = 'none'; });
        document.body.style.marginTop = '0';
        document.body.style.backgroundPosition = '0px 0px';
        document.body.classList.remove('shipping-msg');
    };
    function applyText() {
        if (bannerInfo.text) {
            document.body.insertAdjacentHTML('beforeend', bannerInfo.text);
            document.body.className += ' shipping-msg';
        }
    }
    function fetchText() {
        if (!url) {
            return;
        }
        var request = new XMLHttpRequest();
        request.open('GET', url, true);
        request.onreadystatechange = function () {
            if (this.readyState === 4) {
                if (this.status === 200 || this.status === 204) {
                    bannerInfo = {
                        date: +new Date(),
                        text: this.responseText,
                        key: key
                    };
                    __helpers.localStorageSet('banner_message', JSON.stringify(bannerInfo));
                    applyText();
                }
            }
        };
        request.send();
    }
    if (bannerInfo && bannerInfo.hide) {
        // Nothing
    }
    else if (bannerInfo && bannerInfo.key === key) {
        if (!bannerInfo.text && age >= 1) {
            fetchText();
        }
        else {
            applyText();
        }
    }
    else {
        fetchText();
    }
})();
/// <reference path="helpers.ts" />
var createCookieLS = function () {
    try {
        window.localStorage.setItem("gdpr_cookie_consent", JSON.stringify({ "acceptedOn": new Date() }));
        __helpers.selectorForEach(document, '.cookie-notice, .cookie-mask', function (e) { return e.style.display = 'none'; });
        document.body.style.marginTop = '0';
        document.body.style.backgroundPosition = '0px 0px';
        document.body.className = document.body.className.replace('gdpr', '');
    }
    catch (error) { }
};
if (__headerData.text.gdpr) {
    if (!__helpers.localStorageGet('gdpr_cookie_consent')) {
        document.body.insertAdjacentHTML("beforeend", __headerData.text.gdpr);
        document.body.className += " gdpr";
    }
}
/// <reference path="helpers.ts" />
/// <reference path="headerLayout.ts" />
/// <reference path="langCurr.ts" />
/// <reference path="dialog.ts" />
/// <reference path="banners.ts" />
/// <reference path="gdpr.ts" />
(function () {
    var modal = document.querySelector('#settingsModal');
    // Remember our loaded lang-cur combinations
    var modalContentTable = {};
    modalContentTable[__headerData.lang + ';' + __headerData.cur] = modal.innerHTML;
    // The component state
    var selectedLang;
    var selectedCur;
    // The actions
    var lastReq = [true];
    function getModalMarkup(lang, cur, cont) {
        var html = modalContentTable[lang + ';' + cur];
        if (html) {
            cont(html);
        }
        else {
            lastReq[0] = false;
            var req_1 = [true];
            lastReq = req_1;
            var xhr_1 = new XMLHttpRequest();
            xhr_1.open('POST', '/api/scTools/CurrencyPrompt/GetCurrencyPrompt', true);
            xhr_1.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
            xhr_1.onload = function () {
                if (xhr_1.readyState === 4 && xhr_1.status === 200) {
                    var div = document.createElement('div');
                    div.innerHTML = xhr_1.responseText;
                    var m = div.querySelector('#settingsModal');
                    if (m) {
                        html = m.innerHTML;
                        modalContentTable[lang + ';' + cur] = html;
                        if (req_1[0]) {
                            cont(html);
                        }
                    }
                }
            };
            var scLang = lang + '-' + (__headerData.site === 'UK' ? 'GB' : __headerData.site);
            xhr_1.send('name=' + encodeURIComponent(modal.getAttribute('data-name')) + '&lang=' + encodeURIComponent(scLang) + '&cur=' + encodeURIComponent(cur));
            cont(undefined);
        }
    }
    function getEnables() {
        var status = __headerLayout.registrationStatus;
        var isLoggedIn = false;
        if (status) {
            if (status['IsLoggedIn'] === undefined) {
                isLoggedIn = status['DisplayName'] !== '';
            }
            else {
                isLoggedIn = status['IsLoggedIn'];
            }
        }
        var loggedIn = isLoggedIn && !!modal.querySelector('.settingsModal__loggedIn');
        var res = [
            !(selectedCur === 'CNY') && __langCurr.langToggleEnabled,
            !loggedIn && __langCurr.curToggleEnabled,
            loggedIn
        ];
        return res;
    }
    function changeLang(lang) {
        var enabled = getEnables()[0];
        if (!enabled || selectedLang === lang) {
            return;
        }
        if (selectedCur === 'CNY' && lang === 'en') {
            selectedCur = 'USD';
        }
        selectedLang = lang;
        redisplay();
    }
    function changeCur(cur) {
        var enabled = getEnables()[1];
        if (!enabled || selectedCur === cur) {
            return;
        }
        if (cur === 'CNY') {
            selectedLang = 'zh';
        }
        selectedCur = cur;
        redisplay();
    }
    function applySelection() {
        var lang = selectedLang;
        var cur = selectedCur;
        function doChange() {
            if (lang === __headerData.lang && cur === __headerData.cur) {
                dk.modal(modal).hide();
            }
            else {
                __langCurr.invokeChange(lang, cur);
            }
        }
        var dialog;
        function contRemoveDenied(accepted) {
            if (accepted) {
                doChange();
            }
            else if (dialog) {
                __helpers.setCookieValue(__headerData.cur);
                dialog.close();
            }
        }
        if (cur === __headerData.cur || document.domain.indexOf('.cn') > -1) {
            doChange();
        }
        else {
            __helpers.setCookieValue(cur);
            window.headerAcceptCurrencyChange = contRemoveDenied;
            var url = '/classic/ordering/currencysmall.aspx?headerCurrChange=true&cscur=' + encodeURIComponent(cur);
            dialog = createDialog(url, 'currency-denied-frame', function () { return contRemoveDenied(false); });
        }
    }
    // Lifecycle
    function redisplay() {
        var lang = selectedLang;
        var cur = selectedCur;
        getModalMarkup(lang, cur, function (html) {
            if (html) {
                modal.innerHTML = html;
                redisplayInternal(true);
            }
            else {
                redisplayInternal(false);
            }
        });
    }
    function getCountryUrl(locale) {
        var hrefData = window.hrefData;
        if (hrefData) {
            var linkData = hrefData[locale];
            if (linkData) {
                var link = document.createElement("link");
                link.href = hrefData[locale];
                return link.href;
            }
            else {
                return null;
            }
        }
        //else fallback to href lang
        var hrefLink = document.querySelector("link[hreflang='" + locale + "']");
        return hrefLink && hrefLink.href;
    }
    function redisplayInternal(hookEvents) {
        var langList = modal.querySelectorAll('.settingsModal__languageList > span');
        var curList = modal.querySelectorAll('.settingsModal__currencyList > span');
        var countryList = modal.querySelectorAll('.settingsModal__countryList a');
        var _a = getEnables(), langEnabled = _a[0], curEnabled = _a[1], loggedIn = _a[2];
        // Display
        function setClass(el, code, enabled, klass) {
            el.className = el.getAttribute('data-code') === code ? klass : (enabled ? '' : 'disabled');
        }
        function updateCountryLink(link) {
            var original = link.getAttribute('data-original') || link.href;
            link.setAttribute('data-original', original);
            var country = link.getAttribute('data-code').toLowerCase();
            var url = getCountryUrl(selectedLang + '-' + country) || getCountryUrl('en-' + country) || original;
            if (country === 'cn') {
                url = url.replace(/\/en(\/|$)/, '/zh$1');
                if (url.indexOf('/zh') === url.length - 3) {
                    url = url.replace('/zh', '');
                }
            }
            var domain = document.location.hostname.replace(/\.digikey\..*$/, '.digikey.com');
            link.href = '//' + domain + '/api/scTools/Footer/SetDomain?url=' + encodeURIComponent(url);
        }
        for (var i = 0; i < langList.length; i++) {
            setClass(langList[i], selectedLang, langEnabled, 'settingsModal__languageList--selected');
        }
        for (var i = 0; i < curList.length; i++) {
            setClass(curList[i], selectedCur, curEnabled, 'settingsModal__currencyList--selected');
        }
        for (var i = 0; i < countryList.length; i++) {
            updateCountryLink(countryList[i]);
        }
        if (loggedIn) {
            modal.querySelector('.settingsModal__loggedIn').className = 'settingsModal__loggedIn';
        }
        if (!__headerData.config.enableCountryToggle) {
            modal.querySelector('.dk-modal__content > .dk-grid > .w-full:first-child').style.display = 'none';
        }
        var updateButton = modal.querySelector('.settingsModal__buttons > .dk-btn__primary');
        if (updateButton) {
            var newLang = selectedLang !== __headerData.lang;
            var newCur = selectedCur !== __headerData.cur;
            if (newLang && newCur) {
                updateButton.setAttribute('ref_page_event', 'Select Lang and Currency');
            }
            else if (newLang && !newCur) {
                updateButton.setAttribute('ref_page_event', 'Select Lang');
            }
            else if (!newLang && newCur) {
                updateButton.setAttribute('ref_page_event', 'Select Currency');
            }
            else {
                updateButton.removeAttribute('ref_page_event');
            }
        }
        if (!hookEvents) {
            return;
        }
        // Events
        __helpers.onEvent(langList, 'click', function () {
            changeLang(this.getAttribute('data-code'));
        });
        __helpers.onEvent(curList, 'click', function () {
            changeCur(this.getAttribute('data-code'));
        });
        updateButton && updateButton.addEventListener('click', function () {
            applySelection();
        });
        var cancelButton = modal.querySelector('.settingsModal__buttons > .dk-btn__secondary');
        cancelButton && cancelButton.addEventListener('click', function () {
            dk.modal(modal).hide();
        });
        modal.querySelector('.dk-modal__close').addEventListener('click', function () {
            dk.modal(modal).hide();
        });
    }
    // Our entry point
    function displayModal() {
        // Init the settings
        selectedLang = __headerData.lang;
        selectedCur = __headerData.cur;
        redisplay();
        // Add Analytics
        var wa = window;
        function __analyticsView(data) {
            var utag = wa.utag;
            if (utag) {
                utag.dkView(data);
            }
            var dl = wa.dataLayer;
            if (dl) {
                dl.push(data);
            }
        }
        __analyticsView({
            event: "page_view",
            page_title: "Select Country & Currency",
            page_id: "SCT",
            page_content_group: "Resources",
            page_content_sub_group: "Select Country",
            page_type: "RE",
            page_sub_type: "SCT"
        });
        dk.modal(modal).show();
    }
    var settingsButton = document.querySelector('#header__open-settings');
    settingsButton && settingsButton.addEventListener('click', function (e) {
        displayModal();
        e.preventDefault();
    });
    // For use on supplier centers
    window.displayCurPrompt = displayModal;
})();
/// <reference path="settingsModal.ts" />
/// <reference path="headerLayout.ts" />
/// <reference path="langCurr.ts" />
__headerData.__settings = {
    getHeaderInfoUrl: function (site, lang, cur) {
        if (site == 'GB') {
            site = 'UK';
        }
        var url = '/classic/headerinfo.ashx?site=' + site + '&lang=' + lang + '&cur=' + cur;
        if (cur === 'CNY') {
            url = '/zh/ordering/headerinfo';
        }
        return {
            url: url,
            hasUser: false
        };
    },
    chinaHack: function (cur) {
        if (__langCurr.headerData.site === 'CN' && cur !== __headerLayout.effectiveCur) {
            var path = window.location.pathname;
            var cdlocation = void 0;
            if (cur == 'USD') {
                if (/\/\w{2}\/ordering/.test(path)) {
                    cdlocation = '/ordering/shoppingcart';
                }
                else {
                    return false;
                }
            }
            else {
                if (path.indexOf('/ordering/') == 0) {
                    cdlocation = '/zh/ordering/cart';
                }
                else if (path.indexOf('/en/') != -1) {
                    cdlocation = path.replace('/en/', '/zh/') + '?cur=CNY';
                }
                else if (path.indexOf('/en') == (path.length - 3)) {
                    cdlocation = '';
                }
                else {
                    return false;
                }
            }
            window.location.href = 'https://' + window.location.hostname + cdlocation;
            return true;
        }
        else {
            return false;
        }
    },
    tweakRMB: function (site, cur, href) {
        if (site !== 'CN') {
            return href;
        }
        var searchStart = href.indexOf('?');
        var path = href.substring(0, searchStart < 0 ? href.length : searchStart);
        var newPath = '';
        if (cur === 'USD') {
            if (/\/\w{2}\/ordering/.test(path)) {
                newPath = '/ordering/shoppingcart';
            }
        }
        else {
            if (path.indexOf('/ordering/') === 0) {
                newPath = '/zh/ordering/cart';
            }
        }
        return newPath || href;
    }
};
__langCurr.doLangPref();
__headerLayout.getPersonalization();
__headerLayout.setMyLists();
